diff --git a/src/server/game/Chat/HyperlinkTags.cpp b/src/server/game/Chat/HyperlinkTags.cpp
index 49efa0b2f..64f6f521f 100755
--- a/src/server/game/Chat/HyperlinkTags.cpp
+++ b/src/server/game/Chat/HyperlinkTags.cpp
@@ -148,8 +148,8 @@ bool Acore::Hyperlinks::LinkTags::item::StoreTo(ItemLinkData& val, std::string_v
 
     if (randomPropertyId < 0)
     {
-        if (!val.Item->RandomSuffix)
-            return false;
+        // if (!val.Item->RandomSuffix)
+        //     return false;
 
         if (randomPropertyId < -static_cast<int32>(sItemRandomSuffixStore.GetNumRows()))
             return false;
@@ -164,8 +164,8 @@ bool Acore::Hyperlinks::LinkTags::item::StoreTo(ItemLinkData& val, std::string_v
     }
     else if (randomPropertyId > 0)
     {
-        if (!val.Item->RandomProperty)
-            return false;
+        // if (!val.Item->RandomProperty)
+        //     return false;
 
         if (ItemRandomPropertiesEntry const* propEntry = sItemRandomPropertiesStore.LookupEntry(randomPropertyId))
         {
@@ -181,8 +181,8 @@ bool Acore::Hyperlinks::LinkTags::item::StoreTo(ItemLinkData& val, std::string_v
         val.RandomProperty = nullptr;
     }
 
-    if ((val.RandomSuffix && !val.RandomSuffixBaseAmount) || (val.RandomSuffixBaseAmount && !val.RandomSuffix))
-        return false;
+    // if ((val.RandomSuffix && !val.RandomSuffixBaseAmount) || (val.RandomSuffixBaseAmount && !val.RandomSuffix))
+    //     return false;
 
     return true;
 }
diff --git a/src/server/game/Entities/Item/ItemEnchantmentMgr.cpp b/src/server/game/Entities/Item/ItemEnchantmentMgr.cpp
index 6696e66b9..34ab87651 100755
--- a/src/server/game/Entities/Item/ItemEnchantmentMgr.cpp
+++ b/src/server/game/Entities/Item/ItemEnchantmentMgr.cpp
@@ -125,8 +125,9 @@ uint32 GenerateEnchSuffixFactor(uint32 item_id)
 
     if (!itemProto)
         return 0;
-    if (!itemProto->RandomSuffix)
-        return 0;
+    // Disable this check to enable generating suffix factor for ALL items
+    // if (!itemProto->RandomSuffix)
+    //     return 0;
 
     RandomPropertiesPointsEntry const* randomProperty = sRandomPropertiesPointsStore.LookupEntry(itemProto->ItemLevel);
     if (!randomProperty)
@@ -141,7 +142,7 @@ uint32 GenerateEnchSuffixFactor(uint32 item_id)
         case INVTYPE_TABARD:
         case INVTYPE_AMMO:
         case INVTYPE_QUIVER:
-        case INVTYPE_RELIC:
+        // case INVTYPE_RELIC:
             return 0;
         // Select point coefficient
         case INVTYPE_HEAD:
@@ -175,6 +176,7 @@ uint32 GenerateEnchSuffixFactor(uint32 item_id)
         case INVTYPE_RANGED:
         case INVTYPE_THROWN:
         case INVTYPE_RANGEDRIGHT:
+        case INVTYPE_RELIC:
             suffixFactor = 4;
             break;
         default:
@@ -183,6 +185,8 @@ uint32 GenerateEnchSuffixFactor(uint32 item_id)
     // Select rare/epic modifier
     switch (itemProto->Quality)
     {
+        case ITEM_QUALITY_NORMAL:
+            return randomProperty->UncommonPropertiesPoints[suffixFactor];
         case ITEM_QUALITY_UNCOMMON:
             return randomProperty->UncommonPropertiesPoints[suffixFactor];
         case ITEM_QUALITY_RARE:
@@ -190,6 +194,7 @@ uint32 GenerateEnchSuffixFactor(uint32 item_id)
         case ITEM_QUALITY_EPIC:
             return randomProperty->EpicPropertiesPoints[suffixFactor];
         case ITEM_QUALITY_LEGENDARY:
+            return randomProperty->EpicPropertiesPoints[suffixFactor];
         case ITEM_QUALITY_ARTIFACT:
             return 0;                                       // not have random properties
         default:
